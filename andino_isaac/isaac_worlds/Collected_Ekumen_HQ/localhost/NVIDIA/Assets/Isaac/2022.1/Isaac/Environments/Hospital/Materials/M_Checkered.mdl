mdl 1.3;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using OmniUe4Function import *;
using OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material M_Checkered(
	float HueShiftPercentage_S_ = 1.0,
	float B = 0.5,
	float Fraction = 2.0,
	float B_1 = 0.8)
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(0).x,1.0-state::texture_coordinate(0).y);

	float2 Local0 = (CustomizedUV0_mdl * 4.0);
	float4 Local1 = ::unpack_normal_map(tex::lookup_float4(texture_2d("./Textures/Tex_Checkered_normal.png",::tex::gamma_linear),float2(Local0.x,1.0-Local0.y),tex::wrap_repeat,tex::wrap_repeat));

	float3 Normal_mdl = float3(Local1.x,Local1.y,Local1.z);

	float Local2 = (HueShiftPercentage_S_ * 6.283185);
	float Local3 = math::dot(float3(1.0,1.0,1.0), float3(1.0,1.0,1.0));
	float Local4 = math::sqrt(Local3);
	float3 Local5 = (float3(1.0,1.0,1.0) / Local4);
	float4 Local6 = tex::lookup_float4(texture_2d("./Textures/Tex_Checkered_basecolor.png",::tex::gamma_linear),float2(Local0.x,1.0-Local0.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local7 = (float3(Local6.x,Local6.y,Local6.z) * B);
	float Local8 = math::dot(Local7, float3(0.3,0.59,0.11));
	float3 Local9 = math::lerp(Local7,float3(Local8,Local8,Local8),Fraction);
	float3 Local10 = ::rotate_about_axis(float4(Local5.x,Local5.y,Local5.z,Local2),float3(0.0,0.0,0.0),Local9);
	float3 Local11 = (Local10 + Local9);
	float4 Local12 = tex::lookup_float4(texture_2d("./Textures/Tex_Checkered_RAM.png",::tex::gamma_linear),float2(Local0.x,1.0-Local0.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local13 = (Local12.x * B_1);

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float OpacityMask_mdl = 1.0;
	float3 BaseColor_mdl = Local11;
	float Metallic_mdl = Local12.z;
	float Specular_mdl = 0.1;
	float Roughness_mdl = Local13;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false);
